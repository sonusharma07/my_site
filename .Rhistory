pred1 <- 2.718*pred
?arima()
fit <- arima(log(AirPassengers),c(0,1,1),seasonal = list(order = c(0,1,1), period=12))
pred <- predict(fit , 10*12)
pred1 <- 2.718*pred
pred1 <- 2.718^pred$pred
ts.plot(AirPassengers,2.718^pred$pred , log="y" , lty = c(1,3))
datawide <- ts(AirPassengers,frequency = 12,start = c(1949,1),end = c(1959,12))
fit <- arima(log(datawide) , c(0,1,1),seasonal = list(order = c(0,1,1),period = 12))
pred < - predict(fit, 10*12)
pred1 <- 2.718^pred$pred
data1 <- head(pred1 ,12)
predicted_1960 <- round(data1 , digits = 0)
original_1960 <- tail(AirPassengers ,12)
predicted_1960
original_1960
fit <- arima(log(datawide) , c(0,1,1),seasonal = list(order = c(0,1,1),period = 12))
pred < - predict(fit, 10*12)
fit <- arima(log(AirPassengers),c(0,1,1),seasonal = list(order = c(0,1,1), period=12))
pred <- predict(fit , 10*12)
datawide
fit <- arima(log(datawide) , c(0,1,1),seasonal = list(order = c(0,1,1),period = 12))
pred < - predict(fit, 10*12)
pred < - predict(fit, n.ahead = 10*12 )
pred <- predict(fit, n.ahead = 10*12 )
pred1 <- 2.718^pred$pred
data1 <- head(pred1 ,12)
predicted_1960 <- round(data1 , digits = 0)
original_1960 <- tail(AirPassengers ,12)
predicted_1960
original_1960
install.packages("mlbench")
library(mlbench)
library(help="mlbench")
data("BostonHousing")
dim(BostonHousing)
head(BostonHousing)
?data("BostonHousing")
data("BreastCancer")
dim(BreastCancer)
head(BreastCancer)
class(BreastCancer)
str(BreastCancer)
str(BostonHousing)
library(caret)
patindex <- createDataPartition(BostonHousing$medv , p=0.6)
train <- BostonHousing[patindex , ]
patindex <- createDataPartition(BostonHousing$medv , p=0.6 , list = FALSE)
train <- BostonHousing[patindex , ]
test <- BostonHousing[-patindex,]
nrow(train)
nrow(test)
head(train)
head(test)
trainx <- model.matrix(train$medv~.,train)
head(trainx)
trainy <- train[,c=("medv")]
trainy <- train[,"medv"]
head(trainy)
cvlasso <- cv.glmnet(x=trainx , y=trainy , alpha =1 , type.measure = "mse",nfolds = 10)
library(glmnet)
cvlasso <- cv.glmnet(x=trainx , y=trainy , alpha =1 , type.measure = "mse",nfolds = 10)
plot(cvlasso)
lasso <- glmnet(x = trainx , y = trainy, alpha = 1 , lambda = cvlasso$lambda.1se)
plot(lasso)
testx <- model.matrix(test$medv~.,test)
head(testx)
testy <- test[,"medv"]
head(testy)
yhatlasso <- predict(lasso, s=lasso$lambda.1se, newx=testx)
yhatlasso
plot(lasso , xvar="Lambda")
plot(lasso , xvar="lambda")
plot(lasso , xvar="lambda")
mselasso <- mean((testy - yhatlasso)^2)
mselasso
?glmnet
lassUndefinedlambda <- glmnet(x = trainx , y = trainy, alpha = 1 )
plot(lassUndefinedlambda , xvar="lambda")
head(testy)
yhatlasso <- round(yhatlasso , digits = 1)
head(yhatlasso)
mselasso <- mean((testy - yhatlasso)^2)
mselasso
testy - yhatlasso
lassUndefinedlambda <- glmnet(x = trainx , y = trainy, alpha = 1 , family = "gaussian")
plot(lassUndefinedlambda , xvar="lambda")
cvlasso <- cv.glmnet(x=trainx , y=trainy , alpha =1 , type.measure = "mse",nfolds = 10 ,family = "gaussian")
plot(cvlasso)
lasso <- glmnet(x = trainx , y = trainy, alpha = 1 , lambda = cvlasso$lambda.1se , family = "gaussian")
plot(lasso , xvar="lambda")
yhatlasso <- predict(lasso, s=lasso$lambda.1se, newx=testx)
head(yhatlasso)
yhatlasso <- round(yhatlasso , digits = 1)
yhatlasso <- round(yhatlasso , digits = 1)
head(testy)
mselasso <- mean((testy - yhatlasso)^2)
mselasso
lassUndefinedlambda <- glmnet(x = trainx , y = trainy, alpha = 1 , family = "gaussian")
RidgeUndefinedlambda <- glmnet(x = trainx , y = trainy, alpha = 0 , family = "gaussian")
ElasticUndefinedlambda <- glmnet(x = trainx , y = trainy, alpha = 0.5 , family = "gaussian")
plot(lassUndefinedlambda , xvar="lambda")
plot(RidgeUndefinedlambda , xvar="lambda")
plot(ElasticUndefinedlambda , xvar="lambda")
cvlasso <- cv.glmnet(x=trainx , y=trainy , alpha =1 , type.measure = "mse",nfolds = 10 ,family = "gaussian")
cvRidge <- cv.glmnet(x=trainx , y=trainy , alpha =0 , type.measure = "mse",nfolds = 10 ,family = "gaussian")
cvElastic <- cv.glmnet(x=trainx , y=trainy , alpha =0.5 , type.measure = "mse",nfolds = 10 ,family = "gaussian")
plot(cvlasso)
plot(cvRidge)
plot(cvElastic)
yhatlasso <- predict(cvlasso, s=cvlasso$lambda.1se, newx=testx)
yhatRidge <- predict(cvRidge , s=cvRidge$lambda.1se, newx = testx)
yhatElastic <- predict(cvElastic , s=cvElastic$lambda.1se, newx = testx)
mselasso <- mean((testy - yhatlasso)^2)
mseRidge <- mean((testy - yhatRidge)^2)
mseElastic <- mean((testy - yhatElastic)^2)
mselasso
mseRidge
mseElastic
lassUndefinedlambda <- glmnet(x = trainx , y = trainy, alpha = 1 , family = "gaussian")
RidgeUndefinedlambda <- glmnet(x = trainx , y = trainy, alpha = 0 , family = "gaussian")
ElasticUndefinedlambda <- glmnet(x = trainx , y = trainy, alpha = 0.5 , family = "gaussian")
plot(lassUndefinedlambda , xvar="lambda")
plot(RidgeUndefinedlambda , xvar="lambda")
plot(ElasticUndefinedlambda , xvar="lambda")
cvlasso <- cv.glmnet(x=trainx , y=trainy , alpha =1 , type.measure = "mse",nfolds = 10 ,family = "gaussian")
cvRidge <- cv.glmnet(x=trainx , y=trainy , alpha =0 , type.measure = "mse",nfolds = 10 ,family = "gaussian")
cvElastic <- cv.glmnet(x=trainx , y=trainy , alpha =0.5 , type.measure = "mse",nfolds = 10 ,family = "gaussian")
plot(cvlasso)
plot(cvRidge)
plot(cvElastic)
#lasso <- glmnet(x = trainx , y = trainy, alpha = 1 , lambda = cvlasso$lambda.1se , family = "gaussian")
yhatlasso <- predict(cvlasso, s=cvlasso$lambda.1se, newx=testx)
yhatRidge <- predict(cvRidge , s=cvRidge$lambda.1se, newx = testx)
yhatElastic <- predict(cvElastic , s=cvElastic$lambda.1se, newx = testx)
mselasso <- mean((testy - yhatlasso)^2)
mseRidge <- mean((testy - yhatRidge)^2)
mseElastic <- mean((testy - yhatElastic)^2)
mselasso
mseRidge
mseElastic
lassUndefinedlambda <- glmnet(x = trainx , y = trainy, alpha = 1 , family = "gaussian")
RidgeUndefinedlambda <- glmnet(x = trainx , y = trainy, alpha = 0 , family = "gaussian")
ElasticUndefinedlambda <- glmnet(x = trainx , y = trainy, alpha = 0.5 , family = "gaussian")
plot(lassUndefinedlambda , xvar="lambda")
plot(RidgeUndefinedlambda , xvar="lambda")
plot(ElasticUndefinedlambda , xvar="lambda")
cvlasso <- cv.glmnet(x=trainx , y=trainy , alpha =1 , type.measure = "mse",nfolds = 10 ,family = "gaussian")
cvRidge <- cv.glmnet(x=trainx , y=trainy , alpha =0 , type.measure = "mse",nfolds = 10 ,family = "gaussian")
cvElastic <- cv.glmnet(x=trainx , y=trainy , alpha =0.5 , type.measure = "mse",nfolds = 10 ,family = "gaussian")
plot(cvlasso)
plot(cvRidge)
plot(cvElastic)
#lasso <- glmnet(x = trainx , y = trainy, alpha = 1 , lambda = cvlasso$lambda.1se , family = "gaussian")
yhatlasso <- predict(cvlasso, s=cvlasso$lambda.1se, newx=testx)
yhatRidge <- predict(cvRidge , s=cvRidge$lambda.1se, newx = testx)
yhatElastic <- predict(cvElastic , s=cvElastic$lambda.1se, newx = testx)
mselasso <- mean((testy - yhatlasso)^2)
mseRidge <- mean((testy - yhatRidge)^2)
mseElastic <- mean((testy - yhatElastic)^2)
mselasso
mseRidge
mseElastic
glmmodel <- glm(train$medv~., family = "gaussian", data = train)
plot(glmmodel)
glmpred <- predict(glmmodel , test)
glmpred
mseglm <- mean((test$medv - glmpred)^2)
mseglm
summary(glmmodel)
install.packages("sqldf")
library(help=("sqldf"))
library(help="sqldf")
head(BostonHousing)
sqldf("SELECT * FROM BostonHousing WHERE medv < = 20 ")
library(mlbench)
data("BostonHousing")
sqldf("SELECT * FROM BostonHousing WHERE medv < = 20 ")
library(sqldf)
sqldf("SELECT * FROM BostonHousing WHERE medv < = 20 ")
?sqldf()
?sqldf()
sqldf("SELECT * FROM BostonHousing WHERE medv < = 20 ")
sqldf("SELECT * FROM BostonHousing WHERE medv < = 20 ")
sqldf("SELECT * FROM BostonHousing WHERE medv < = 20 ")
library(sqldf)
install.packages("gsubfn")
library(sqldf)
sqldf("SELECT * FROM BostonHousing WHERE medv < = 20 ")
?sqldf()
library(gsubfn)
library(sqldf)
library(gsubfn)
install.packages("proto")
library(gsubfn)
library(sqldf)
sqldf("SELECT * FROM BostonHousing WHERE medv < = 20 ")
sqldf("SELECT * FROM BostonHousing WHERE medv <= 20 ")
View(vol)
initial <- read.xlsx("~/research/volume.xlsx",sheetIndex = 1)
initial <- read.xlsx("~/research/volume.xlsx",sheetIndex = 1)
library(xlsx)
initial <- read.xlsx("~/research/volume.xlsx",sheetIndex = 1)
View(initial)
ind_one <- initial[1:6, ]
View(ind_one)
ind_one <- initial[2:6, ]
View(ind_one)
cts <- ts(ind_one)
class(cts)
frequency(cts)
cycle(cts)
start(cts)
end(cts)
summary(cts)
plot(cts)
plot(cts)
length(ind_one)
cts <- ts(ind_one , start=c(S_0077-0, 1), end=c(S_0077-30, 19),frequency = 19)
cts <- ts(ind_one , start=c("S_0077-0", 1), end=c("S_0077-30", 19),frequency = 19)
ind_one[1:6, 1] <- c(0,1,2,3,4,5)
ind_one[1:5, 1] <- c(0,1,2,3,4,5)
ind_one[o, 1] <- 0
ind_one[o, 1] <- c(0)
ind_one[o, 1] <- c(0)
ind_one[0, 1] <- c(0)
ind_one[0,0] <- 0
ind_one[1,1] <- 0
ind_one <- initial[2:6, ]
ind_one <- initial[2:6,-1 ]
View(ind_one)
cbind(c(1,2,3,4,5),ind_one)
cbind(c(1,2,3,4,5),ind_one)
View(ind_one)
cbind(c(1,2,3,4,5),ind_one)
cbind(id =  c(1,2,3,4,5),ind_one)
View(ind_one)
cbind(c(1,2,3,4,5),ind_one)
cbind(id =0,ind_one)
View(ind_one)
ind_one <- data.frame(id = c(1,2,3,4,5) , ind_one)
View(ind_one)
cts <- ts(ind_one , start=c(1, 1), end=c(5, 19),frequency = 19)
class(cts)
str(cts)
frequency(cts)
cycle(cts)
ind_one <- ind_one[,-2]
cts <- ts(ind_one , start=c(1, 1), end=c(5, 19),frequency = 19)
str(cts)
cycle(cts)
start(cts)
end(cts)
summary(cts)
plot(cts)
install.packages("boostmtree")
library(boostmtree)
??boostmtree
dta <- simLong(n = 100, ntest = 100, model = 0, q = 5)
dta
View(dta)
dta$dtaL
View(dta$dtaL)
View(dta$trn)
View(dta$f.true)
dta <- dta$dtaL
dta <- simLong(n = 50, N = 5, rho =.80, model = 2)$dtaL
boost.grow <- boostmtree(dta$features, dta$time, dta$id, dta$y, M = 20)
print(boost.grow)
plot(boost.grow)
View(dta)
#install.packages("boostmtree")
library(boostmtree)
#??boostmtree
##Simple output of simLong()
dta <- simLong(n = 100, ntest = 100, model = 0, q = 5)
head(dta$dtaL , n=20)
##Example on bootmtree
##------------------------------------------------------------
## synthetic example
## 0.8 correlation, quadratic time with quadratic interaction
##-------------------------------------------------------------
#simulate the data (use a small sample size for illustration)
dta <- simLong(n = 50, N = 5, rho =.80, model = 2)$dtaL
head(dta , n = 20)
#basic boosting call (M set to a small value for illustration)
boost.grow <- boostmtree(dta$features, dta$time, dta$id, dta$y, M = 20)
#print results
print(boost.grow)
#plot.results
plot(boost.grow)
dta <- simLong(n = 100, ntest = 100, model = 0, q = 5)
dta1 <- simLong(n = 100, ntest = 100, model = 0, q = 5)
dta1 <- simLong(n = 100, ntest = 100, model = 0, q = 5)
dta1$dtaL[20,]
dta1$dtaL
view(dta1$dtaL)
View(dta1$dtaL)
dim(dta1$dtaL)
head(dta1$dtaL)
dta[20,]
head(dta)
str(dta1$dtaL)
str(dta)
data4visit<-visit_4_scoresonly1and4fin
data4visit$NACCUDSD <- ifelse(data4visit$NACCUDSD ==4 , 0,1)
missdata4visit <- replace.value(data4visit , names(data4visit),from = -4 , to = NA)
library(anchors)
#missForest
install.packages("missForest")
library(missForest)
library(anchors)
##working on data obtained by file preprocessvits.r
#since -4,in the data is NULL ,its representaion is NA
#SO conversion__is needed
missdata4visit <- replace.value(data4visit , names(data4visit),from = -4 , to = NA)
#View(missdata4visit)
#class of  or data is in form of data.frame ##it is not acceptable by missForest()
class(missdata4visit)
##data.frame to data.matrix conversion
miss <- as.matrix(missdata4visit)
start_time <- Sys.time()
##running with default parameters##15.329269516468 sec
missFor <- missForest(miss)
library(readxl)
Imputed_4visit_data_by_missForest <- read_excel("~/research/Imputed_4visit_data_by_missForest.xlsx",
col_types = c("blank", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric"))
View(Imputed_4visit_data_by_missForest)
missy<-Imputed_4visit_data_by_missForest
facdata4visitscore <- Imputed_4visit_data_by_missForest
facdata4visitscore$NACCUDSD <- as.character(facdata4visitscore$NACCUDSD)
facdata4visitscore$NACCUDSD <- as.factor(facdata4visitscore$NACCUDSD)
facdata4visitscore <- as.data.frame(facdata4visitscore)
#visit4 score
nrow(facdata4visitscore)
#5114
table(facdata4visitscore$NACCUDSD)
#0    1
#401 4713
prop.table(table(facdata4visitscore$NACCUDSD))
#0         1
#0.0784122 0.9215878
library(DMwR)
attach(facdata4visitscore)
FAQsmoty<- SMOTE(NACCUDSD~. ,data = facdata4visitscore,perc.over = 600 , perc.under = 100 )
detach(facdata4visitscore)
table(FAQsmoty$NACCUDSD)
prop.table(table(FAQsmoty$NACCUDSD))
nrow(FAQsmoty)
nrow(FAQsmoty)
misssmot <- FAQsmoty
nrow(impsmoty)
prop.table(table(impsmoty$NACCUDSD))
misssmot$NACCUDSD <- as.numeric(misssmot$NACCUDSD)
##
set.seed(100)
set.seed(110)
trainingRows <- sample(1:nrow(misssmot), 0.6*nrow(misssmot))
training4visit <- misssmot[trainingRows, ]
test4visit <- misssmot[-trainingRows, ]
library(GA)
library(ROCR)
log_reg <- function(x)
{
model <- glm(training4visit$NACCUDSD ~. ,data =subset( training4visit ,select=x), family = binomial(link = "logit"))
#summary(model)
p <- predict(model,newdata = subset(test4visit,select = x ) ,type = "response")
pr <- prediction(p,test4visit$NACCUDSD)
prf <- performance(pr, measure = "tpr", x.measure = "fpr")
#plot(prf)
auc <- performance(pr, measure = "auc")
auc <- auc@y.values[[1]]
return(auc)
#return(BIC(model))
#AIC(model)
#SIC(model)
##for accuracy
#fitted.results <- ifelse(fitted.results > 0.5,1,0)
#misClasificError <- mean(fitted.results != test4visit$NACCUDSD)
#acc <- 1 - misClasificError
#return(acc)
}
f <- function(x)
{
x<-unique(as.integer(x))
#cat(x)
return(log_reg(x))
}
fitness <- function(x)
{
f(x)
}
gaMonitor2 <- function(object, digits = getOption("digits"), ...)
{
fitness <- na.exclude(object@fitness)
cat(paste("GA | Iter =", object@iter,
" | Mean =", format(mean(fitness), digits = digits),
" | Best =", format(max(fitness), digits = digits),
"\n"))
a<-object@iter
men<-format(mean(fitness), digits = digits)
bet<-format(max(fitness), digits = digits)
flush.console()
}
start_time <- Sys.time()
for(i in c(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20))
{
start_time <- Sys.time()
##Genitic Algorithm
gamodel <- ga(type = "real-valued",min = c(1,1,1,1,1),max = c(16,16,16,16,16),popSize = 50,maxiter = i,fitness = fitness,keepBest = TRUE,monitor = gaMonitor2,selection = gareal_tourSelection)
end_time <- Sys.time()
Total_time <- end_time - start_time
Total_time
cat(paste(Total_time))
cat(paste("Running for Iteration",i))
cat("| Solution IS ")
cat(paste(as.integer(gamodel@solution[1,])))
cat("\n")
}
#output
#out<-data.frame(Popsize=gamodel@popSize,Iterations=gamodel@iter,elitism=gamodel@elitism,solution=as.integer(gamodel@solution[1,]),fitness=gamodel@fitnessValue)
#write.csv(out,file = "BICvisit1attr1.csv",row.names = FALSE)
#summary.ga(gamodel)
table(FAQsmoty$NACCUDSD)
training4visit <- smote4visitscore
table(training4visit$NACCUDSD)
training4visit$NACCUDSD <- as.numeric(as.character(smote4visitscore$NACCUDSD))
datanoNA$NACCUDSD <- ifelse(datanoNA$NACCUDSD ==4 , 0,1)
test4visit <- datanoNA
table(datanoNA$NACCUDSD)
class(datanoNA$NACCUDSD)
table(datanoNA$NACCUDSD)
missy<-Imputed_4visit_data_by_missForest
set.seed(110)
trainingRows <- sample(1:nrow(missy), 0.6*nrow(missy))
training4visit <- missy[trainingRows, ]
test4visit <- missy[-trainingRows, ]
table(test4visit$NACCUDSD)
table(training4visit$NACCUDSD)
library(GA)
library(ROCR)
log_reg <- function(x)
{
model <- glm(training4visit$NACCUDSD ~. ,data =subset( training4visit ,select=x), family = binomial(link = "logit"))
#summary(model)
p <- predict(model,newdata = subset(test4visit,select = x ) ,type = "response")
pr <- prediction(p,test4visit$NACCUDSD)
prf <- performance(pr, measure = "tpr", x.measure = "fpr")
#plot(prf)
auc <- performance(pr, measure = "auc")
auc <- auc@y.values[[1]]
return(auc)
#return(BIC(model))
#AIC(model)
#SIC(model)
##for accuracy
#fitted.results <- ifelse(fitted.results > 0.5,1,0)
#misClasificError <- mean(fitted.results != test4visit$NACCUDSD)
#acc <- 1 - misClasificError
#return(acc)
}
f <- function(x)
{
x<-unique(as.integer(x))
#cat(x)
return(log_reg(x))
}
fitness <- function(x)
{
f(x)
}
gaMonitor2 <- function(object, digits = getOption("digits"), ...)
{
fitness <- na.exclude(object@fitness)
cat(paste("GA | Iter =", object@iter,
" | Mean =", format(mean(fitness), digits = digits),
" | Best =", format(max(fitness), digits = digits),
"\n"))
a<-object@iter
men<-format(mean(fitness), digits = digits)
bet<-format(max(fitness), digits = digits)
flush.console()
}
start_time <- Sys.time()
for(i in c(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20))
{
start_time <- Sys.time()
##Genitic Algorithm
gamodel <- ga(type = "real-valued",min = c(1,1,1,1,1),max = c(16,16,16,16,16),popSize = 50,maxiter = i,fitness = fitness,keepBest = TRUE,monitor = gaMonitor2,selection = gareal_tourSelection)
end_time <- Sys.time()
Total_time <- end_time - start_time
Total_time
cat(paste(Total_time))
cat(paste("Running for Iteration",i))
cat("| Solution IS ")
cat(paste(as.integer(gamodel@solution[1,])))
cat("\n")
}
View(missdata4visit)
version()
install.packages("GA")
install.packages("ROCR")
install.packages("Matrix")
install.packages("Matrix")
install.packages("Matrix")
setwd("~/my_site/")
?Rmarkdown
